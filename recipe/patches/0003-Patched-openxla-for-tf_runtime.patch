From 87edb88681f56417a651bb9fb54a2bbd244b301a Mon Sep 17 00:00:00 2001
From: Deepali Chourasia <deepch23@in.ibm.com>
Date: Mon, 8 Apr 2024 05:53:23 +0000
Subject: [PATCH] Patched-openxla-for-tf_runtime

---
 build/build.py                                |   1 +
 jax/tools/build_utils.py                      |   1 +
 ...001-TF-runtime-patched-on-big-endian.patch | 169 ++++++++++++++++++
 third_party/xla/workspace.bzl                 |   2 +-
 4 files changed, 172 insertions(+), 1 deletion(-)
 create mode 100644 third_party/xla/0001-TF-runtime-patched-on-big-endian.patch

diff --git a/build/build.py b/build/build.py
index 41994c4b4..b8807f468 100755
--- a/build/build.py
+++ b/build/build.py
@@ -484,6 +484,7 @@ def main():
       "darwin_arm64": "arm64",
       "darwin_x86_64": "x86_64",
       "ppc": "ppc64le",
+      "s390x": "s390x",
       "aarch64": "aarch64",
   }
   # TODO(phawkins): support other bazel cpu overrides.
diff --git a/jax/tools/build_utils.py b/jax/tools/build_utils.py
index 22aa87771..e3367b131 100644
--- a/jax/tools/build_utils.py
+++ b/jax/tools/build_utils.py
@@ -56,6 +56,7 @@ def platform_tag(cpu: str) -> str:
     ("Linux", "x86_64"): ("manylinux2014", "x86_64"),
     ("Linux", "aarch64"): ("manylinux2014", "aarch64"),
     ("Linux", "ppc64le"): ("manylinux2014", "ppc64le"),
+    ("Linux", "s390x"): ("manylinux2014", "s390x"),
     ("Darwin", "x86_64"): ("macosx_10_14", "x86_64"),
     ("Darwin", "arm64"): ("macosx_11_0", "arm64"),
     ("Windows", "AMD64"): ("win", "amd64"),
diff --git a/third_party/xla/0001-TF-runtime-patched-on-big-endian.patch b/third_party/xla/0001-TF-runtime-patched-on-big-endian.patch
new file mode 100644
index 000000000..2aa620d3e
--- /dev/null
+++ b/third_party/xla/0001-TF-runtime-patched-on-big-endian.patch
@@ -0,0 +1,169 @@
+From d2afc1cb441feef86b3b52cc23b0bdf07a99739f Mon Sep 17 00:00:00 2001
+From: Aman Surkar <Aman.Surkar@ibm.com>
+Date: Fri, 8 Mar 2024 16:46:34 +0000
+Subject: [PATCH] TF-runtime-patched-on-big-endian
+
+---
+ 0001-Fix-openssl-for-s390x.patch              | 25 ++++++
+ ...ble-asserts-for-little-endian-checks.patch | 85 +++++++++++++++++++
+ .../tsl/third_party/tf_runtime/workspace.bzl  |  2 +-
+ workspace2.bzl                                |  3 +-
+ 4 files changed, 113 insertions(+), 2 deletions(-)
+ create mode 100644 0001-Fix-openssl-for-s390x.patch
+ create mode 100644 third_party/tsl/third_party/tf_runtime/0001-Disable-asserts-for-little-endian-checks.patch
+
+diff --git a/0001-Fix-openssl-for-s390x.patch b/0001-Fix-openssl-for-s390x.patch
+new file mode 100644
+index 000000000..ff9dd69ed
+--- /dev/null
++++ b/0001-Fix-openssl-for-s390x.patch
+@@ -0,0 +1,25 @@
++From 2bfd08f5ca5e5fa7bbe5a137f85742a7ad2f563b Mon Sep 17 00:00:00 2001
++From: Aman Surkar <Aman.Surkar@ibm.com>
++Date: Fri, 8 Mar 2024 11:30:13 +0000
++Subject: [PATCH] Fix openssl for s390x
++
++---
++ src/include/openssl/base.h | 2 +-
++ 1 file changed, 1 insertion(+), 1 deletion(-)
++
++diff --git a/src/include/openssl/base.h b/src/include/openssl/base.h
++index 983eadc5d..34747261c 100644
++--- a/src/include/openssl/base.h
+++++ b/src/include/openssl/base.h
++@@ -123,7 +123,7 @@ extern "C" {
++ // little-endian architectures. Functions will not produce the correct answer
++ // on other systems. Run the crypto_test binary, notably
++ // crypto/compiler_test.cc, before adding a new architecture.
++-#error "Unknown target CPU"
+++#define OPENSSL_64_BIT
++ #endif
++ 
++ #if defined(__APPLE__)
++-- 
++2.34.1
++
+diff --git a/third_party/tsl/third_party/tf_runtime/0001-Disable-asserts-for-little-endian-checks.patch b/third_party/tsl/third_party/tf_runtime/0001-Disable-asserts-for-little-endian-checks.patch
+new file mode 100644
+index 000000000..d44719da7
+--- /dev/null
++++ b/third_party/tsl/third_party/tf_runtime/0001-Disable-asserts-for-little-endian-checks.patch
+@@ -0,0 +1,85 @@
++From 25800b790b8d61781bd63b37068b04b221640d88 Mon Sep 17 00:00:00 2001
++From: Aman Surkar <Aman.Surkar@ibm.com>
++Date: Tue, 5 Mar 2024 13:10:13 +0000
++Subject: [PATCH] Disable asserts for little endian checks
++
++---
++ include/tfrt/bef/bef_reader.h               | 2 +-
++ include/tfrt/bef_converter/bef_emitter.h    | 2 +-
++ include/tfrt/host_context/attribute_utils.h | 4 ++--
++ lib/tensor/tensor_serialize_utils.cc        | 4 ++--
++ 4 files changed, 6 insertions(+), 6 deletions(-)
++
++diff --git a/include/tfrt/bef/bef_reader.h b/include/tfrt/bef/bef_reader.h
++index b0ff7ab5..20bc6e62 100644
++--- a/include/tfrt/bef/bef_reader.h
+++++ b/include/tfrt/bef/bef_reader.h
++@@ -146,7 +146,7 @@ class BEFKernel {
++                                                    kKernelEntryAlignment) /
++                                          kKernelEntryAlignment),
++         body_start_(result_table_ + header_->num_results) {
++-    ASSERT_LITTLE_ENDIAN();
+++    //ASSERT_LITTLE_ENDIAN();
++   }
++ 
++   uint32_t kernel_code() const { return header_->kernel_code; }
++diff --git a/include/tfrt/bef_converter/bef_emitter.h b/include/tfrt/bef_converter/bef_emitter.h
++index 2aae7d44..154eda31 100644
++--- a/include/tfrt/bef_converter/bef_emitter.h
+++++ b/include/tfrt/bef_converter/bef_emitter.h
++@@ -59,7 +59,7 @@ class BefEmitter {
++   // Emit a generic typed value: e.g., Emit<uint32_t>(val).
++   template <typename T>
++   void Emit(T value) {
++-    ASSERT_LITTLE_ENDIAN();
+++    //ASSERT_LITTLE_ENDIAN();
++     EmitAlignment(alignof(T));
++     EmitBytes(llvm::ArrayRef(reinterpret_cast<uint8_t*>(&value), sizeof(T)));
++   }
++diff --git a/include/tfrt/host_context/attribute_utils.h b/include/tfrt/host_context/attribute_utils.h
++index cbded469..b1074096 100644
++--- a/include/tfrt/host_context/attribute_utils.h
+++++ b/include/tfrt/host_context/attribute_utils.h
++@@ -52,7 +52,7 @@ class Attribute {
++  public:
++   explicit Attribute(const void* value)
++       : value_(*reinterpret_cast<const T*>(value)) {
++-    ASSERT_LITTLE_ENDIAN();
+++    //ASSERT_LITTLE_ENDIAN();
++   }
++ 
++   const T& get() const { return value_; }
++@@ -127,7 +127,7 @@ class CompilationUnitAttribute {
++  public:
++   explicit CompilationUnitAttribute(const void* value)
++       : addr_(reinterpret_cast<intptr_t>(value)) {
++-    ASSERT_LITTLE_ENDIAN();
+++    //ASSERT_LITTLE_ENDIAN();
++     const auto* ptr = static_cast<const uint8_t*>(value);
++ 
++     ptr = ReadVbrInt(ptr, &id_);
++diff --git a/lib/tensor/tensor_serialize_utils.cc b/lib/tensor/tensor_serialize_utils.cc
++index ddaa7b1b..c585054e 100644
++--- a/lib/tensor/tensor_serialize_utils.cc
+++++ b/lib/tensor/tensor_serialize_utils.cc
++@@ -102,7 +102,7 @@ std::string SerializeTensorMetadata(const TensorMetadata& md) {
++ 
++ llvm::Expected<TensorMetadata> DeserializeTensorMetadataInternal(
++     const char* pos, size_t size) {
++-  ASSERT_LITTLE_ENDIAN();
+++  //ASSERT_LITTLE_ENDIAN();
++   DType kind = static_cast<DType>(*reinterpret_cast<const uint64_t*>(pos));
++   pos += sizeof(uint64_t);
++   const int num_dimensions = size / 8 - 1;
++@@ -119,7 +119,7 @@ llvm::Expected<TensorMetadata> DeserializeTensorMetadataInternal(
++ 
++ llvm::Expected<TensorMetadata> DeserializeTensorMetadata(
++     string_view serialized) {
++-  ASSERT_LITTLE_ENDIAN();
+++  //ASSERT_LITTLE_ENDIAN();
++   return DeserializeTensorMetadataInternal(serialized.data(),
++                                            serialized.size());
++ }
++-- 
++2.34.1
++
+diff --git a/third_party/tsl/third_party/tf_runtime/workspace.bzl b/third_party/tsl/third_party/tf_runtime/workspace.bzl
+index 10bd2ec86..c98698aed 100644
+--- a/third_party/tsl/third_party/tf_runtime/workspace.bzl
++++ b/third_party/tsl/third_party/tf_runtime/workspace.bzl
+@@ -16,5 +16,5 @@ def repo():
+         urls = tf_mirror_urls("https://github.com/tensorflow/runtime/archive/{commit}.tar.gz".format(commit = TFRT_COMMIT)),
+         # A patch file can be provided for atomic commits to both TF and TFRT.
+         # The job that bumps the TFRT_COMMIT also resets patch_file to 'None'.
+-        patch_file = None,
++        patch_file = ["//third_party:tf_runtime/0001-Disable-asserts-for-little-endian-checks.patch"],
+     )
+diff --git a/workspace2.bzl b/workspace2.bzl
+index cae6a0edb..2f5fac4b6 100644
+--- a/workspace2.bzl
++++ b/workspace2.bzl
+@@ -49,10 +49,11 @@ def _tf_repositories():
+
+     tf_http_archive(
+         name = "boringssl",
+-        sha256 = "9dc53f851107eaf87b391136d13b815df97ec8f76dadb487b58b2fc45e624d2c",
+-        strip_prefix = "boringssl-c00d7ca810e93780bd0c8ee4eea28f4f2ea4bcdc",
++        sha256 = "534fa658bd845fd974b50b10f444d392dfd0d93768c4a51b61263fd37d851c40",
++        strip_prefix = "boringssl-b9232f9e27e5668bc0414879dcdedb2a59ea75f2",
+         system_build_file = "//third_party/systemlibs:boringssl.BUILD",
+-        urls = tf_mirror_urls("https://github.com/google/boringssl/archive/c00d7ca810e93780bd0c8ee4eea28f4f2ea4bcdc.tar.gz"),
++        patch_file = ["//:0001-Fix-openssl-for-s390x.patch"],
++        urls = tf_mirror_urls("https://github.com/google/boringssl/archive/b9232f9e27e5668bc0414879dcdedb2a59ea75f2.tar.gz"),
+     )
+
+     tf_http_archive(
+--
+2.34.1
+
diff --git a/third_party/xla/workspace.bzl b/third_party/xla/workspace.bzl
index a6f972c34..ce9daf6c8 100644
--- a/third_party/xla/workspace.bzl
+++ b/third_party/xla/workspace.bzl
@@ -29,7 +29,7 @@ def repo():
         sha256 = XLA_SHA256,
         strip_prefix = "xla-{commit}".format(commit = XLA_COMMIT),
         urls = tf_mirror_urls("https://github.com/openxla/xla/archive/{commit}.tar.gz".format(commit = XLA_COMMIT)),
-        patch_file = ["//third_party/xla:log.patch"],
+        patch_file = ["//third_party/xla:log.patch","//third_party/xla:0001-TF-runtime-patched-on-big-endian.patch"],
     )
 
     # For development, one often wants to make changes to the TF repository as well
-- 
2.34.1

